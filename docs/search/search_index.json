{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"General Information This manual describes how to add the SPECT8 OTT overlay to your video player. You can jump directly to Web Integration or Android Integration . Note that a one-time Tenant setup is required for any of our customers. Assumptions Integration information given on these pages assumes the following: You have a access to a video stream for your event, which provides a reliable source of time signals that define the current video frame's event time Terminology A broadcast is some video content for any type of event, e.g. a tennis match or a casting show, for which a video stream is available somewhere (most likely some CDN). Every broadcast must have a unique id. The overlay is our OTT overlay solution, which is placed as a layer on top of the video player embedded in your app or web page.","title":"General Information"},{"location":"#general-information","text":"This manual describes how to add the SPECT8 OTT overlay to your video player. You can jump directly to Web Integration or Android Integration . Note that a one-time Tenant setup is required for any of our customers.","title":"General Information"},{"location":"#assumptions","text":"Integration information given on these pages assumes the following: You have a access to a video stream for your event, which provides a reliable source of time signals that define the current video frame's event time","title":"Assumptions"},{"location":"#terminology","text":"A broadcast is some video content for any type of event, e.g. a tennis match or a casting show, for which a video stream is available somewhere (most likely some CDN). Every broadcast must have a unique id. The overlay is our OTT overlay solution, which is placed as a layer on top of the video player embedded in your app or web page.","title":"Terminology"},{"location":"android-integration/","text":"Android Integration Dependencies Include the SPECT8-OTT Android dependency in your build file: Maven (pom.xml): <dependency> <groupId>org.vaudience</groupId> <artifactId>spect8-ott-android</artifactId> <version>1.0</version> </dependency> Gradle (build.gradle): compile \"org.vaudience:spect8-ott-android:1.0\" Add overlay component To add the overlay component to one of your activities (containing the video player) follow these steps: change layout xml Add <net.vaudience.spect8ott.OverlayView> to add the OverlayView your layout. configure overlay in actvitiy In the Java/Kotlin source code of your activity (most likely in your onCreate() method) add the following code to bootstrap the overlay: // configure Overlay val overlayView = findViewById<OverlayView>(R.id.overlayView) overlayView.callbacks = object : OverlayCallbacks { @JavascriptInterface override fun getCurrentPosition(): Long { return videoView.currentPosition } @JavascriptInterface override fun fakeTouch() { mediaController.show(3000) } @JavascriptInterface getBroadcastId: function () { return \"the-broadcast-id\"; } @JavascriptInterface getTenantId: function () { return \"your-tenant-id\"; } @JavascriptInterface getUserToken: function () { return \"some-token-from-your-infrastructure-identifying-the-user\"; } @JavascriptInterface getAppType: function () { return \"type-of-app-that-integrates-the-overlay\"; } } The code above obtains a reference to the OverlayView instance and registers an instance providing several callbacks: getCurrentPosition returns the videos current time signal as a UNIX timestamp (using seconds, not milliseconds) defining the current time of the video stream, which is required for synchronizing data received from some event feed API (e.g. goal scored) fakeTouch This method is called from the overlay. The overlay consumes all touch events so that no video controls are shown if a button etc is touched. But if an empty space is touched we want to show the controls so we call the fakeTouch method. In this method you have to implement a way to show your video players controls. The example above shows how the controls of a native android VideoView are shown. getBroadcastId returns the unique identifier of the video content. Assuming a CMS renders out a page for each streamed video, this identifier would be embedded into that page by the CMS getTenantId returns the id that identifies you as a tenant/customer (we give this to you) getUserToken returns some token/session-attribute that identifies a user. This token will be parsed by a backend customization, which we implement as part of your tenant setup getAppType returns the type of the application which useses the overlay. A mobile app would return \"APP\"","title":"Android Integration"},{"location":"android-integration/#android-integration","text":"","title":"Android Integration"},{"location":"android-integration/#dependencies","text":"Include the SPECT8-OTT Android dependency in your build file: Maven (pom.xml): <dependency> <groupId>org.vaudience</groupId> <artifactId>spect8-ott-android</artifactId> <version>1.0</version> </dependency> Gradle (build.gradle): compile \"org.vaudience:spect8-ott-android:1.0\"","title":"Dependencies"},{"location":"android-integration/#add-overlay-component","text":"To add the overlay component to one of your activities (containing the video player) follow these steps:","title":"Add overlay component"},{"location":"android-integration/#change-layout-xml","text":"Add <net.vaudience.spect8ott.OverlayView> to add the OverlayView your layout.","title":"change layout xml"},{"location":"android-integration/#configure-overlay-in-actvitiy","text":"In the Java/Kotlin source code of your activity (most likely in your onCreate() method) add the following code to bootstrap the overlay: // configure Overlay val overlayView = findViewById<OverlayView>(R.id.overlayView) overlayView.callbacks = object : OverlayCallbacks { @JavascriptInterface override fun getCurrentPosition(): Long { return videoView.currentPosition } @JavascriptInterface override fun fakeTouch() { mediaController.show(3000) } @JavascriptInterface getBroadcastId: function () { return \"the-broadcast-id\"; } @JavascriptInterface getTenantId: function () { return \"your-tenant-id\"; } @JavascriptInterface getUserToken: function () { return \"some-token-from-your-infrastructure-identifying-the-user\"; } @JavascriptInterface getAppType: function () { return \"type-of-app-that-integrates-the-overlay\"; } } The code above obtains a reference to the OverlayView instance and registers an instance providing several callbacks: getCurrentPosition returns the videos current time signal as a UNIX timestamp (using seconds, not milliseconds) defining the current time of the video stream, which is required for synchronizing data received from some event feed API (e.g. goal scored) fakeTouch This method is called from the overlay. The overlay consumes all touch events so that no video controls are shown if a button etc is touched. But if an empty space is touched we want to show the controls so we call the fakeTouch method. In this method you have to implement a way to show your video players controls. The example above shows how the controls of a native android VideoView are shown. getBroadcastId returns the unique identifier of the video content. Assuming a CMS renders out a page for each streamed video, this identifier would be embedded into that page by the CMS getTenantId returns the id that identifies you as a tenant/customer (we give this to you) getUserToken returns some token/session-attribute that identifies a user. This token will be parsed by a backend customization, which we implement as part of your tenant setup getAppType returns the type of the application which useses the overlay. A mobile app would return \"APP\"","title":"configure overlay in actvitiy"},{"location":"tenant-setup/","text":"Tenant Setup Firebase The overlay uses Firebase as a data synchronization and authentication hub. We will setup this instance for you or support you setting up this instance. For the overlay to work we create a configuration file including Firebase access details. This configuration file must be made available to the overlay, which is described in any of the \"Integration\" sections. User Authentication Our backend servers require some means to identify a user-id and tenant-id for incoming web requests. For this we discuss with you which kind of token or session data is available in your existing OTT infrastructure, which can be used to provide user identity. We will implement a resolution mechanism, which validates and/or parses token or session data provided by you to create a Firebase IdToken, which serves as a general authentication token for direct Firebase access or for subsequent calls to our overlay backend.","title":"Tenant Setup"},{"location":"tenant-setup/#tenant-setup","text":"","title":"Tenant Setup"},{"location":"tenant-setup/#firebase","text":"The overlay uses Firebase as a data synchronization and authentication hub. We will setup this instance for you or support you setting up this instance. For the overlay to work we create a configuration file including Firebase access details. This configuration file must be made available to the overlay, which is described in any of the \"Integration\" sections.","title":"Firebase"},{"location":"tenant-setup/#user-authentication","text":"Our backend servers require some means to identify a user-id and tenant-id for incoming web requests. For this we discuss with you which kind of token or session data is available in your existing OTT infrastructure, which can be used to provide user identity. We will implement a resolution mechanism, which validates and/or parses token or session data provided by you to create a Firebase IdToken, which serves as a general authentication token for direct Firebase access or for subsequent calls to our overlay backend.","title":"User Authentication"},{"location":"web-integration/","text":"Web Integration This guide assumes that there is some kind of HTML page rendered by your OTT infrastructure, which includes a video player for which you want to enable our OTT overlay. Include dependencies Add the following <script> block to the end of your HTML page to include our overlay code: <script src=https://vaudience.github.io/spect8-ott-frontend/js/chunk-vendors-0.1.0.js></script> <script src=https://vaudience.github.io/spect8-ott-frontend/js/app-0.1.0.js></script> Add overlay div Your HTML page must contain a <div> element with id \"app\", which will be the DOM-root for the overlay contents: <div id=\"app\"></div> It is usually added as a subsequent sibling of the video element and styled having the same position and size, such as: <div id=\"video-container\"> <video></video> <div id=\"app\"></div> </div> Implement a configuration callback wrapper Our overlay code requires a global wrapper variable to exist. This wrapper contains a few callback functions, which must be implemented to provide the required configuration and runtime data to the overlay: const wrapper = { vid: document.getElementById(\"video\"), getVideo: function () { return wrapper.vid; }, getCurrentPosition: function () { return (wrapper.vid.currentTime * 1000); }, getBroadcastId: function () { return \"the-broadcast-id\"; }, getTenantId: function () { return \"your-tenant-id\"; }, getUserToken: function () { return \"some-token-from-your-infrastructure-identifying-the-user\"; }, getAppType: function () { return \"type-of-app-that-integrates-the-overlay\"; } }; window.wrapper = wrapper; Here are details about each callback: getVideo returns the video player element, which is required for the video capturing feature getCurrentPosition returns the videos current time signal as a UNIX timestamp (using seconds, not milliseconds) defining the current time of the video stream, which is required for synchronizing data received from some event feed API (e.g. goal scored) getBroadcastId returns the unique identifier of the video content. Assuming a CMS renders out a page for each streamed video, this identifier would be embedded into that page by the CMS getTenantId returns the id that identifies you as a tenant/customer (we give this to you) getUserToken returns some token/session-attribute that identifies a user. This token will be parsed by a backend customization, which we implement as part of your tenant setup getAppType returns the type of the application which useses the overlay. A website would return \"WEB\"","title":"Web Integration"},{"location":"web-integration/#web-integration","text":"This guide assumes that there is some kind of HTML page rendered by your OTT infrastructure, which includes a video player for which you want to enable our OTT overlay.","title":"Web Integration"},{"location":"web-integration/#include-dependencies","text":"Add the following <script> block to the end of your HTML page to include our overlay code: <script src=https://vaudience.github.io/spect8-ott-frontend/js/chunk-vendors-0.1.0.js></script> <script src=https://vaudience.github.io/spect8-ott-frontend/js/app-0.1.0.js></script>","title":"Include dependencies"},{"location":"web-integration/#add-overlay-div","text":"Your HTML page must contain a <div> element with id \"app\", which will be the DOM-root for the overlay contents: <div id=\"app\"></div> It is usually added as a subsequent sibling of the video element and styled having the same position and size, such as: <div id=\"video-container\"> <video></video> <div id=\"app\"></div> </div>","title":"Add overlay div"},{"location":"web-integration/#implement-a-configuration-callback-wrapper","text":"Our overlay code requires a global wrapper variable to exist. This wrapper contains a few callback functions, which must be implemented to provide the required configuration and runtime data to the overlay: const wrapper = { vid: document.getElementById(\"video\"), getVideo: function () { return wrapper.vid; }, getCurrentPosition: function () { return (wrapper.vid.currentTime * 1000); }, getBroadcastId: function () { return \"the-broadcast-id\"; }, getTenantId: function () { return \"your-tenant-id\"; }, getUserToken: function () { return \"some-token-from-your-infrastructure-identifying-the-user\"; }, getAppType: function () { return \"type-of-app-that-integrates-the-overlay\"; } }; window.wrapper = wrapper; Here are details about each callback: getVideo returns the video player element, which is required for the video capturing feature getCurrentPosition returns the videos current time signal as a UNIX timestamp (using seconds, not milliseconds) defining the current time of the video stream, which is required for synchronizing data received from some event feed API (e.g. goal scored) getBroadcastId returns the unique identifier of the video content. Assuming a CMS renders out a page for each streamed video, this identifier would be embedded into that page by the CMS getTenantId returns the id that identifies you as a tenant/customer (we give this to you) getUserToken returns some token/session-attribute that identifies a user. This token will be parsed by a backend customization, which we implement as part of your tenant setup getAppType returns the type of the application which useses the overlay. A website would return \"WEB\"","title":"Implement a configuration callback wrapper"}]}